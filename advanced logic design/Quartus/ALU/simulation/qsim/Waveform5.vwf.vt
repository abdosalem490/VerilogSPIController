// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/16/2021 15:01:53"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ALU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ALU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg x0;
reg X1;
reg X2;
reg X3;
reg Y0;
reg Y1;
reg Y2;
reg Y3;
// wires                                               
wire S0;
wire S1;
wire S2;
wire S3;

// assign statements (if any)                          
ALU i1 (
// port map - connection between master ports and signals/registers   
	.S0(S0),
	.S1(S1),
	.S2(S2),
	.S3(S3),
	.x0(x0),
	.X1(X1),
	.X2(X2),
	.X3(X3),
	.Y0(Y0),
	.Y1(Y1),
	.Y2(Y2),
	.Y3(Y3)
);
initial 
begin 
#1000000 $finish;
end 

// x0
initial
begin
	x0 = 1'b0;
	x0 = #40000 1'b1;
	x0 = #10000 1'b0;
	x0 = #170000 1'b1;
	x0 = #10000 1'b0;
end 

// Y0
initial
begin
	Y0 = 1'b0;
	Y0 = #40000 1'b1;
	Y0 = #10000 1'b0;
	Y0 = #90000 1'b1;
	Y0 = #10000 1'b0;
end 

// X1
initial
begin
	X1 = 1'b0;
	X1 = #40000 1'b1;
	X1 = #10000 1'b0;
	X1 = #200000 1'b1;
	X1 = #20000 1'b0;
end 

// Y1
initial
begin
	Y1 = 1'b0;
	Y1 = #40000 1'b1;
	Y1 = #10000 1'b0;
	Y1 = #130000 1'b1;
	Y1 = #10000 1'b0;
end 

// X2
initial
begin
	X2 = 1'b0;
	X2 = #80000 1'b1;
	X2 = #10000 1'b0;
	X2 = #160000 1'b1;
	X2 = #10000 1'b0;
end 

// Y2
initial
begin
	Y2 = 1'b0;
	Y2 = #80000 1'b1;
	Y2 = #10000 1'b0;
	Y2 = #60000 1'b1;
	Y2 = #10000 1'b0;
end 

// X3
initial
begin
	X3 = 1'b0;
	X3 = #80000 1'b1;
	X3 = #20000 1'b0;
	X3 = #130000 1'b1;
	X3 = #10000 1'b0;
end 

// Y3
initial
begin
	Y3 = 1'b0;
	Y3 = #80000 1'b1;
	Y3 = #20000 1'b0;
	Y3 = #30000 1'b1;
	Y3 = #20000 1'b0;
end 
endmodule

