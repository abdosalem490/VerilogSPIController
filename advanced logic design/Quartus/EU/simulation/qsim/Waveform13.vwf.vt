// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/31/2021 14:56:44"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          EU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module EU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] DOne;
reg [3:0] DThree;
reg [3:0] DTwo;
reg [3:0] DZero;
reg [8:0] S;
// wires                                               
wire [3:0] VAL;

// assign statements (if any)                          
EU i1 (
// port map - connection between master ports and signals/registers   
	.DOne(DOne),
	.DThree(DThree),
	.DTwo(DTwo),
	.DZero(DZero),
	.S(S),
	.VAL(VAL)
);
initial 
begin 
#1000000 $finish;
end 
// DThree[ 3 ]
initial
begin
	DThree[3] = 1'b0;
end 
// DThree[ 2 ]
initial
begin
	DThree[2] = 1'b1;
end 
// DThree[ 1 ]
initial
begin
	DThree[1] = 1'b0;
end 
// DThree[ 0 ]
initial
begin
	DThree[0] = 1'b0;
end 
// DTwo[ 3 ]
initial
begin
	DTwo[3] = 1'b1;
end 
// DTwo[ 2 ]
initial
begin
	DTwo[2] = 1'b0;
end 
// DTwo[ 1 ]
initial
begin
	DTwo[1] = 1'b0;
end 
// DTwo[ 0 ]
initial
begin
	DTwo[0] = 1'b0;
end 
// DOne[ 3 ]
initial
begin
	DOne[3] = 1'b1;
end 
// DOne[ 2 ]
initial
begin
	DOne[2] = 1'b1;
end 
// DOne[ 1 ]
initial
begin
	DOne[1] = 1'b1;
end 
// DOne[ 0 ]
initial
begin
	DOne[0] = 1'b1;
end 
// DZero[ 3 ]
initial
begin
	DZero[3] = 1'b0;
end 
// DZero[ 2 ]
initial
begin
	DZero[2] = 1'b0;
end 
// DZero[ 1 ]
initial
begin
	DZero[1] = 1'b1;
end 
// DZero[ 0 ]
initial
begin
	DZero[0] = 1'b1;
end 
// S[ 8 ]
initial
begin
	S[8] = 1'b0;
end 
// S[ 7 ]
initial
begin
	S[7] = 1'b0;
end 
// S[ 6 ]
initial
begin
	S[6] = 1'b0;
end 
// S[ 5 ]
initial
begin
	S[5] = 1'b0;
end 
// S[ 4 ]
initial
begin
	S[4] = 1'b0;
	S[4] = #350000 1'b1;
	S[4] = #70000 1'b0;
end 
// S[ 3 ]
initial
begin
	S[3] = 1'b0;
end 
// S[ 2 ]
initial
begin
	S[2] = 1'b0;
	S[2] = #270000 1'b1;
	S[2] = #150000 1'b0;
end 
// S[ 1 ]
initial
begin
	S[1] = 1'b0;
	S[1] = #140000 1'b1;
	S[1] = #130000 1'b0;
end 
// S[ 0 ]
initial
begin
	S[0] = 1'b0;
	S[0] = #60000 1'b1;
	S[0] = #80000 1'b0;
	S[0] = #60000 1'b1;
	S[0] = #70000 1'b0;
	S[0] = #80000 1'b1;
	S[0] = #70000 1'b0;
end 
endmodule

