// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/15/2021 14:47:35"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          EU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module EU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [8:0] Input;
// wires                                               
wire [3:0] ALU;
wire [3:0] VAL_REG_ONE;
wire [3:0] VAL_REG_THREE;
wire [3:0] VAL_REG_TWO;
wire [3:0] VAL_REG_ZERO;

// assign statements (if any)                          
EU i1 (
// port map - connection between master ports and signals/registers   
	.ALU(ALU),
	.CLK(CLK),
	.\Input (Input),
	.VAL_REG_ONE(VAL_REG_ONE),
	.VAL_REG_THREE(VAL_REG_THREE),
	.VAL_REG_TWO(VAL_REG_TWO),
	.VAL_REG_ZERO(VAL_REG_ZERO)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
initial
begin
	CLK = 1'b0;
	CLK = #100000 1'b1;
	CLK = #90000 1'b0;
end 
// \Input [ 8 ]
initial
begin
	Input[8] = 1'b0;
end 
// \Input [ 7 ]
initial
begin
	Input[7] = 1'b0;
	Input[7] = #110000 1'b1;
	Input[7] = #50000 1'b0;
end 
// \Input [ 6 ]
initial
begin
	Input[6] = 1'b0;
end 
// \Input [ 5 ]
initial
begin
	Input[5] = 1'b0;
end 
// \Input [ 4 ]
initial
begin
	Input[4] = 1'b0;
	Input[4] = #110000 1'b1;
	Input[4] = #50000 1'b0;
end 
// \Input [ 3 ]
initial
begin
	Input[3] = 1'b0;
end 
// \Input [ 2 ]
initial
begin
	Input[2] = 1'b0;
	Input[2] = #110000 1'b1;
	Input[2] = #50000 1'b0;
end 
// \Input [ 1 ]
initial
begin
	Input[1] = 1'b0;
end 
// \Input [ 0 ]
initial
begin
	Input[0] = 1'b0;
end 
endmodule

